{
    "title": "Tired of using Laravel as my backend. What are some services I can use as a backend to get my mobile apps up and running quickly?",
    "author": "Ok_Volume3194",
    "subreddit": "learnprogramming",
    "rank": 12,
    "score": 3,
    "upvote_ratio": 1.0,
    "num_comments (reported by reddit)": 2,
    "url": "https://www.reddit.com/r/learnprogramming/comments/1jec8cp/tired_of_using_laravel_as_my_backend_what_are/",
    "id": "1jec8cp",
    "selftext": "For years, I've been using Laravel to set up my backend for all of my apps.\n\nIt works, but it requires a ton of setup and customization. I want to get the backend up and running quickly so I can focus on developing my apps.\n\nI've heard some people use Firebase as a backend? Is that still valid? Can you do everything you would be able to do in Laravel through Firebase?\n\nI've also heard that accidentally running over your budget with Firebase is a concern, as you cannot set a hard budget limit, leading to some developers reporting accidental spending of thousands of dollars for one month.\n\nWhat are some other alternatives I should consider? What are the advantages and disadvantages of each?\n\nPlease assume that I will be writing apps for both Android and iOS.",
    "comments": [
        {
            "author": "Whatever801",
            "body": "Do you have users or this is more for like personal projects? If it's the latter then free tier should suit you just fine.  I personally wouldn't use firebase for a production project since cost is usage-based and can quickly get out of control as you said. I'm really not a fan of usage-based pricing model. We acquired a company that was using Snowflake and they literally charged us to run the query to see how much we owed. Also, firebase started off as NoSQL only which was the trend at the time. I think they added support for relational DB post-hoc, but not sure how robust it is. NoSQL has it's time and place but for the majority of use cases is not the right design and you end up in data replication hell. Other downside is vendor lock. They'll start you off in free tier to get their tendrils into you and make it a major PITA to migrate off it hoping you decide to just eat the cost rather than migrate later.\n\nYou might look into Supabase which is an open source alternative that is relational database-first. You can self host which should be easy to get up an running with docker. Just get a fixed-cost EC2 and deploy it there, should keep cost under control. You could also just do Lambdas \n\nPersonally feel that yeah these BAAS solutions will get you up and running quick but as soon as you have some unconventional business logic you're SOL. Haven't used Laravel but am partial to Django Rest Framework. A bit of setup, sure, but really pretty easy to get up and running IMO. Very flexible and easy to scale.",
            "score": 2,
            "replies": []
        },
        {
            "author": "gramdel",
            "body": "Yeah, firebase can be a good choice if you need relatively simple backend and don't expect a huge amount of traffic (from cost perspective). \n\nFirebase has cloud functions, so you can create most of the business logic there, so technically you can do a lot of things you would in a traditional custom backend. It will most likely be pretty hard to maintain if your backend is large and complicated though. If you need more complicated workflows, it's not really a solution (by itself). \n\nFirebase can be a nice solution for relatively simple needs. If you need something complex, then you'll most likely need custom solution. Supabase is one firebase alternative that comes to mind, haven't really used it so no actual idea how close to feature parity it is.",
            "score": 1,
            "replies": []
        }
    ]
}