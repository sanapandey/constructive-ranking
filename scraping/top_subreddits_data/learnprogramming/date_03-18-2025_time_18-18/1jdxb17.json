{
    "title": "I do everything the hard way...",
    "author": "Wettmoose",
    "subreddit": "learnprogramming",
    "rank": 18,
    "score": 22,
    "upvote_ratio": 0.93,
    "num_comments (reported by reddit)": 11,
    "url": "https://www.reddit.com/r/learnprogramming/comments/1jdxb17/i_do_everything_the_hard_way/",
    "id": "1jdxb17",
    "selftext": "As the title suggests, I'm currently working through The Odin Project, and I'm really struggling with the JavaScript portion.\n\nI'm having a tough time effectively using different data types and array methods. Instead of leveraging built-in array methods, I often end up writing unnecessary for loops. Similarly, I tend to avoid using objects because I find them confusing, which makes my code more complicated than it needs to be.\n\nRight now, I'm working on the calculator project ([link](https://www.theodinproject.com/lessons/foundations-calculator)), and I've been stuck on it for four hours. I can get it to work, but only in the most inefficient way\u2014my solution is over 150 lines of code. Meanwhile, I see other students solving it in under 100 lines, sometimes even around 50.\n\nDoes anyone have advice on how to better use these tools to my advantage and stop making things harder for myself?",
    "comments": [
        {
            "author": "Temporary_Emu_5918",
            "body": "you just said it yourself. you don't use them. the solution is to use them. read the docs, ask AI. but array methods are a easy and common pattern, so you should use them.\u00a0",
            "score": 23,
            "replies": [
                {
                    "author": "Wettmoose",
                    "body": "yeah and im trying to use them / learn them more and more... I guess i have an unrealistic expectation at how fast i'm going to learn them. sometimes it takes me re reading the docs 10+ times because I dont retain anything until i actually write 100+ lines of code using it.",
                    "score": 3,
                    "replies": [
                        {
                            "author": "Ok_Fox_924",
                            "body": "I think the reality is that when we're learning, we have to accept that we don't know the most efficient or optimal way to do something. The most important part is that you're writing the code. On the bright side, you are able to notice that there is room for improvement, so I would take that and look into how you can improve it.\n\nIf your calculator is working, what I would do is try to make one part of it more efficient and see if you can get it back to the working order by using those tools you noticed. Don't be discouraged by broken code because when you know what doesn't work, think about why it's not working and what you need to do differently to make it work.\n\n I use a lot of printing when I'm trying to learn something so I can see exactly what is happening at each step, and it helps me find the areas where I'm not doing what I intended on doing. \n\nRemember, these topics are weird to our brains because we don't have to think about everything in such a literal way in normal life. Some of the concepts are going to take lots of repetition to sink in fully.",
                            "score": 5,
                            "replies": [
                                {
                                    "author": "Wettmoose",
                                    "body": "I appreciate the read thank you!",
                                    "score": 1,
                                    "replies": [
                                        {
                                            "author": "Ok_Fox_924",
                                            "body": "No problem,  I am by no means an expert. There's a ton that I still have to learn, and i find myself in a similar position where I am putting in a ton of work before a concept truly clicks. Sometimes, it's not until I'm working on another project that I get a clearer understanding of a concept I learned on a previous one. \n\nWe're all walking through this confused out here until we aren't. Just keep asking questions and moving forward.",
                                            "score": 2,
                                            "replies": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "author": "Evelittlewitch",
                            "body": "Don\u2019t compare the number of lines. See if your solution handles better edge cases and is more legible. I constantly reread the docs as I go and it\u2019s not bad that you need to use the logic before really using it. With some experience you\u2019ll find your way of learning new things and how to apply them. Reading documentation will be always useful as more things are added in the language/framework.",
                            "score": 4,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "joranstark018",
            "body": "You should not compare yourself to how fast others may learn this stuff; we all have different backgrounds and capabilities. Just focus on your own learning process. It takes a while for things to sink in and fall into place; just keep practicing. You may try different solutions and compare the outcomes (the first solution is usually not the most effective and clear).\n\n\nDo not try to memorize every detail; learn the basics, about concepts and keywords. Learn how to look up details when you need them; things you use regularly will stick in memory after a while.",
            "score": 6,
            "replies": []
        },
        {
            "author": "desrtfx",
            "body": "As others have already said: you are having unrealistic expectations on yourself and you shouldn't compare yourself to others.\n\nThe primary key is that you can solve the task. That's what programming is all about. Doesn't initially matter if you do it the hard way or if you use built-in functions/methods. In fact, you learn a lot more by doing it the hard way. Using the built-in methods is easy.\n\nFollow the principle:\n\n+ Make it work\n+ Make it pretty/maintainable/modular\n+ Make it fast (if you encounter bottlenecks)\n\nWhile learning, it is generally a good idea to revisit your old projects and rewrite them with the newly acquired skills.\n\nThis way, you don't need to re-think the entire logic and can apply what new material you have learnt. I generally do this when I start with a new language.\n\n*Lines of code* (LOC) are generally a bad metric, both as for performance and as for code quality.\n\nQuite often, longer code is easier to read, follow, understand, and maintain than super short \"code golf\" like genius solutions.\n\nSure, you should sooner or later make use of the built-in methods, but if you can solve your task without them, you even have an edge over those who only rely on what is available and who will get stuck if they don't have what they need directly built-in.\n\nObjects are nothing to be afraid of. Objects are pretty straightforward once you understand them, which can take a while. It is a bit of a different mindset when working OOP. (This was one of the biggest initial hurdles coming from over a decade of just plain old structured, procedural programming. Now, it is completely natural to use OOP where appropriate. - The \"where appropriate\" is the key here - using OOP for OOP's sake offers no benefits.)\n\nYet, OOP really starts to make sense only for larger scale projects. Small, short, one-off projects barely benefit from an OOP approach.\n\nGive yourself time. Practice. Check what is available (documentation) and see how you could make use of it.\n\nExperiment. Try. Fool around. Fail. - Yes, fail. We humans learn most from failing. It is equally important to know how not to do something as to know how to do it. Also, what doesn't work for one use case might work for another and then you know it.\n\nLearning programming is a lengthy and difficult process. Don't look at an end as there is none. Look at the road ahead of you, one step after the other. Enjoy the ride.",
            "score": 6,
            "replies": [
                {
                    "author": "Wettmoose",
                    "body": "Thank you for this! It was a great read! I\u2019ll refer back to this as I continue to learn",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "Only_Compote_7766",
            "body": "I wouldnt sweat it. You learn better doing things the hard way.",
            "score": 2,
            "replies": []
        },
        {
            "author": "spicypeachtea",
            "body": "Just put everything on 1 line!! /s",
            "score": 1,
            "replies": []
        }
    ]
}