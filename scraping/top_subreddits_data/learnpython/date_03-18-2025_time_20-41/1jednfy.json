{
    "title": "If the -= operator removes from a set, then why does += produce error",
    "author": "RodDog710",
    "subreddit": "learnpython",
    "rank": 4,
    "score": 5,
    "upvote_ratio": 0.86,
    "num_comments (reported by reddit)": 6,
    "url": "https://www.reddit.com/r/learnpython/comments/1jednfy/if_the_operator_removes_from_a_set_then_why_does/",
    "id": "1jednfy",
    "selftext": "So learning more about sets, I noticed what appears to be some operator inconsistency with sets, specifically the \"augmented assignment operators\" and was wondering if anyone might be able to convey to underlying logic.\n\n    s = {'foo', 'bar', 'baz', 'qux'}\n    s -= {'bar'} \n    print(s) # output: {'baz', 'foo', 'qux'}\n    s += {'boo'}\n    print(s) # output: TypeError: unsupported operand type(s) for +=: 'set' and 'set'\n\nSo why wouldn't this work both ways, for each of those augmented assignment operators?",
    "comments": [
        {
            "author": "lfdfq",
            "body": "Sets have `|=` not `+=`.\n\nThe set operators are `|` (union), `&` (intersection), `-` (difference) and `^` (symmetric difference)\n\nThese each have augmented versions, so you can `|=`, `&=`, `-=` or `^=` the set.\n\nNot all types have all operators defined on them. You cannot `+` sets at all.",
            "score": 30,
            "replies": [
                {
                    "author": "incompletetrembling",
                    "body": "Although \"+\" is not an unreasonable symbol for the union operation. Learnt something new today :)",
                    "score": 4,
                    "replies": []
                },
                {
                    "author": "Cr0od",
                    "body": "God damn it , I\u2019m  suffering through discrete math \u2026now I\u2019m getting why we need to take it in order to understand operators better . Thanks for pointing this out .",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "throwaway6560192",
            "body": "sets don't have addition defined on them to begin with. There is only union (`|`), intersection (`&`), difference (`-`) and symmetric difference (`^`).\n\nI guess they could've defined addition to mean union. This SO thread has some speculation as to why they didn't: https://stackoverflow.com/questions/7692324/why-is-not-understood-by-python-sets\n\n> In set theory the + symbol normally indicates the disjoint union of two sets. [...] So, since the '+' symbol has a quite well-established meaning as a set operation, I find it very consistent that Python does not use this symbol for set union or intersection. Probably Python designer(s) had this in mind when they chose set operators.\n\nand \n\n> \n\n> Sure, they could have used `+` to do a union, but then would still need a symbol for intersection. `|` for union is symmetrical with `&` for intersection and thus makes a better choice.\n\nseem like the most convincing explanations to me.",
            "score": 10,
            "replies": []
        },
        {
            "author": "Mcby",
            "body": "The - operator here does not represent the subtraction operation but the *difference* operation, sometimes denoted with a / in Maths textbooks. What's happening is that you're taking all the elements in set *s* except the ones that are in the set {'bar'}, and then setting *s* to equal the result of this operation. There is no equivalent definition for += defined.",
            "score": 3,
            "replies": []
        },
        {
            "author": "Doormatty",
            "body": "Because `+` doesn't work for sets.\n\nAny set + any other set will throw the same error.",
            "score": 2,
            "replies": []
        }
    ]
}