{
    "title": "I learned the hard way why prototyping can make or break indie games",
    "author": "MochiGameDesign",
    "subreddit": "gamedev",
    "rank": 2,
    "score": 330,
    "upvote_ratio": 0.97,
    "num_comments (reported by reddit)": 40,
    "url": "https://www.reddit.com/r/gamedev/comments/1je5dm0/i_learned_the_hard_way_why_prototyping_can_make/",
    "id": "1je5dm0",
    "selftext": "After over a decade in indie game dev, I've seen prototyping save (and sometimes nearly ruin) my projects. I'm sharing what I've learned the hard way, hoping it helps some of you avoid similar headaches.\n\nWhen I started out, I thought thorough planning on paper was enough; great ideas clearly defined should work, right? Wrong. Time after time, I've found that no amount of fancy documentation replaces building rough versions of mechanics and seeing if they're fun or not.\n\nLook at FTL: Faster Than Light! The devs prototyped their core roguelike spaceship mechanics super early. Because of this, they immediately knew which mechanics were engaging, and which just sounded cool on paper but sucked in practice. They avoided tons of painful rework and nailed the gameplay experience from the start.\n\nWith my own games, when I prototyped early, I quickly discovered what ideas genuinely worked versus what was awful when played. But here's the kicker, I've also skipped prototyping (usually when under time pressure or feeling overconfident), and every single time, it came back to bite me with expensive, frustrating rework.\n\nBut prototyping isn't some magic bullet either. I've struggled with the other extreme, getting stuck in endless prototyping hell (\"just one more tweak!\") and failing to commit. Early in my indie career, my perfectionism disguised as caution left me spinning my wheels for months. It felt productive, but it wasn't, it was just fancy procrastination. I've since learned to prototype just enough to validate core ideas and then force myself to move forward.\n\nNow, you! Has prototyping improved your games? Or maybe you skipped it and regretted it later? Have you struggled, like me, with knowing when to stop tweaking and commit?",
    "comments": [
        {
            "author": "thurn2",
            "body": "Prototyping also helps a lot with motivation/avoiding burnout. If you can consistently show the game to people and have them say \u201cwow this is really fun\u201d it\u2019s much easier to keep working in my experience.",
            "score": 73,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "1000% agree. Motivation is incredibly important\n\n/looks at the pile of abandoned projects...",
                    "score": 22,
                    "replies": []
                },
                {
                    "author": "Snorflork",
                    "body": "Better yet, have them say what's wrong with it.. Build out the core then get it in as many hands as possible. Just because the mechanics/what to do/where to go is obvious to you, almost nobody will agree straight away, until you refine it and work through the causes of the issues.",
                    "score": 5,
                    "replies": []
                },
                {
                    "author": "Solemn926",
                    "body": "I very recently, like a week ago, found this subreddit and started this journey myself. I've been bouncing around tasks/softwares to keep myself from getting burnt out. I'm using Unity to hold everything together and Blender to create all my own models from the ground up because 1. It's good to learn in general and multifaceted enough to also get into rigging and animating as well, and 2. I personally don't want to be lost in the sea of devs that throw together asset flips. I like the added challenge on top of never working with a game engine or even C# before. So I've been just jumping back and forth between modeling things, writing basic code, and setting up pretty universal stuff in Unity like a simple first person controller, a movement script, and importing some things I've modeled as physics objects. Progress is slow, but promising. I'm using \"it's my first time\" as an excuse for me to cut myself some slack for not being a master game developer after a week and that mind set is turning into a nice workflow.",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "TinkerMagus",
            "body": "I really enjoyed this post of yours. We need to talk more about prototyping in this subreddit. That is more useful than steam stats or whatever that is that people post.",
            "score": 99,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "Thanks for taking the time to read it!",
                    "score": 8,
                    "replies": []
                },
                {
                    "author": "BmpBlast",
                    "body": "I agree. While I don't want to imply that those things aren't useful or important, I don't see much content about the nitty gritty of actually designing and building a game. I'm not talking about tutorials, but things like this where devs are sharing small experiences of a specific problem they encountered and solved or things they learned the hard way.\n\nI also recognize that it is a bit hypocritical of me to say this given that I have yet to contribute anything myself.",
                    "score": 7,
                    "replies": [
                        {
                            "author": "timbeaudet",
                            "body": "The last bit is certainly *part* of it in the \"be the change you want to see\" thing. I'm actually trying to work on a deep dive that will *hopefully* be interesting to those that like deep dives in experiences, not yet ready. That said I'm ready for backlash as I'll explain;\n\nI think a major issue is developers have moved their \"I found this neat experience\" type of posts into engine specific sub reddits, forums and communities rather than sharing this experience with the greater world of gamedevs. This is even **more** of an issue when someone works on their custom engine and tries explaining something they solved and the feedback is mega down-voting and negativity for having dared create an engine rather than use an existing one.\n\nI understand it, don't reinvent wheels just to reinvent wheels, and there is some truth to the warnings, but as an engine & game dev, it is hard to share the things I do as the conversation nearly always turns into \"don't do it that way.\"",
                            "score": 1,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "shawnaroo",
            "body": "The most powerful design tool in the universe is iteration. You have an idea, you do what you can to test it, and you revamp things based upon the results of that testing. Rinse and repeat.\n\nOne of the best things about software development compared to so many other design endeavors is that the 'material' costs of prototyping and testing are typically almost nil. Before I started dabbling in gamedev, I designed buildings for a living. Even though in architecture your ultimate goal is a physical building, we had to do the majority of our iteration via sketches/drawings/models/etc. because actually constructing buildings is super expensive. And when things fail, it can often create problems that are really expensive to solve (as well as involve all kinds of lawsuits, legal liability, etc). So we did our best to work out problems 'on paper', but there were always a ton of issues that we'd miss and which would only become apparent during the actual construction. Which is one reason why construction projects so often go off schedule and over-budget. \n\nSo yeah, I think it's silly not to take advantage of the fact that software provides you so many more and relatively cheap ways to test and iterate on your ideas. \n\nLike any sort of real world design project, if you want to actually finish and ship  something, you're going to have to eventually settle on a point where things are 'good enough' and move into more of a production mode rather than a pure design/iteration phase. Otherwise you can get stuck in the design phase forever. There's no easy rule on when/how to do this, it's just something that you have to figure out with each project.",
            "score": 34,
            "replies": [
                {
                    "author": "badasimo",
                    "body": "I think AI is taking this to a new level. You can not only iterate, but you can iterate on parallel paths.  So say I want to make a game, I could generate a prototype that is top down, and a side scroller, that runs in my browser to test the gameplay concept.  Sure it won't look good, or it might not be maintainable/portable the way we would want in a final version.  But we will get vital feedback on our ideas.",
                    "score": -9,
                    "replies": [
                        {
                            "author": "HenryFromNineWorlds",
                            "body": "boo ai",
                            "score": 2,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "mcpatface",
            "body": "The hard part for me is often to figure out what should or shouldn\u2019t be part of the prototype. What if the UI or polish that you cut out is the thing that flips the switch from \u201ceh what is this janky thing\u201d to \u201cwow this is really fun\u201d? How do you tell if there\u2019s something working hiding under the jank?",
            "score": 14,
            "replies": [
                {
                    "author": "poega",
                    "body": "Yeah this is it for me. I currently have a game that have my friends saying their having fun and they want to keep on playing when i show them, but theyre not really getting into the deeper aspects of it. This could either because theyre not as interesting as i think they are, or because theyre delivered via an absolutely awful-looking, helter skelter, some pieces gray boxes some midjourney fancy cards bs-looking UI. I really want to just have a pro do the ui from scratch, but i worry it might be stopping proper prototyping at this stage.",
                    "score": 3,
                    "replies": []
                },
                {
                    "author": "MochiGameDesign",
                    "body": "If you feel it's janky, then the prototype failed. Tweak it heavily or move on :)",
                    "score": 4,
                    "replies": []
                }
            ]
        },
        {
            "author": "Catman87",
            "body": "I really enjoy the design on paper part, but I learnt that every single time it was not enough, as prototyping always gave me more insight on the design. And there is always some dynamic that I would miss on paper. \n\nNow I just brainstorm on paper and jump in rapid prototyping, and I do all iterations that I feel are necessary. Not once did an iteration feel wasteful, it always improved either the game, or my understanding of it.",
            "score": 9,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "Precisely that's the process :)",
                    "score": 3,
                    "replies": []
                }
            ]
        },
        {
            "author": "PrestigiousFriend477",
            "body": "I'm a software engineer in the morning, what you said is true for any type of software.\n\nYou have an awesome start up idea? Cool feature for work? The best mobile app ever?!\n\nAlways test the core principal as soon as possible and try to validate the idea. In gaming this happens to be called prototyping.",
            "score": 4,
            "replies": []
        },
        {
            "author": "Gompa",
            "body": "Is it possible that need for \"One more tweak\" is because the idea itself isn't engaging, and you are trying to fight through it despite this? \n\nOr is it because it is the *most* engaging part of the project where things come together quickly, wheras the slog of actual production is something you are trying to avoid?\n\nI am a hobbyist that has never completed a (marketable) game, but I cant stop making prototypes. Partly for the learning experience, but mostly because that's where it is fun for me. Once I have a fun prototype, i'm like \"Great, thats done.... time to start something new!\"\n\nI am curious if thats the norm, and that \"One more tweak\" is just an excuse to stay on the more engaging prototyping stage.",
            "score": 5,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "I think in your case it's a mix of perfectionism and analysis paralysis. Finishing is important, so try to turn those half-baked games into something, even if it's just to end up on itch",
                    "score": 3,
                    "replies": []
                },
                {
                    "author": "badasimo",
                    "body": "Interestingly this is how I play videogames sometimes, I will treat them as a sandbox to try and do fun things rather than engage with the story or progression (minecraft comes to mind, where I have never been to the End or seen a wither yet I've been playing it for 15 years)",
                    "score": 2,
                    "replies": []
                }
            ]
        },
        {
            "author": "Educational_Ad_6066",
            "body": "not sure if I'm using the same definition of prototyping. Sounds to me like feature branches concepts would be meeting your needs. \n\nI consider a prototype as \"quick execution of total concept\" so like...\"here's a prototype of a tower defense / bullet hell hybrid\" and you use that to say \"this idea has merit\" or \"no, I don't see the value of continuing this\"\n\nevaluating 'tweaks' of a feature is generally an iterative process. Deciding whether a feature will be built is what I would consider prototype. \n\nIn any case, both should be done for finding the best game out of ideas. \n\nOne thing I've seen success with is iterating on feature branches / scratch workspace - then you make a mess out of it until everyone agrees the result is starting to feel right, then you talk implementation details and effectively re-do in a real feature branch for trunk/main with more refined architecture and designs.",
            "score": 2,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "IMHO, I differentiate a Proof of Concept from a Prototype. You test ideas through iterations, and that is a PoC. The super early phase of anything, is a prototype. Makes sense?",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "ManicD7",
            "body": "I've learned the hard way from the opposite direction. I wish I did more system design on paper first. Often I waste time prototyping in the wrong direction that ends up hitting a technical wall. Some of this is just due to lack of experience and knowledge. That doesn't mean I'll prevent all problems by designing on paper first but I'd probably catch a lot more issues beforehand. \n\nSo really, both are important. But which is more important depends on the scope and the current feature you're developing. My game is more technical in nature, so it really should have been designed on paper more to fiqure out the technical limits beforehand. \n\nMy biggest failure - after casually developing my game for a few years in my spare time, I had to re-write my game from scratch because the core tech of my game used too much memory. But it was basically an experiment and was pushing the envelope of game tech anyways. I came up with an idea to solve the memory issue but I didn't want to keep experimenting, so I decided to go a more traditional route. In the end, the traditional route allowed for more details, while having less uniqueness. But the player won't notice the uniqueness if there are enough details. And the uniqueness wouldn't have mattered anyways if there wasn't enough details...",
            "score": 2,
            "replies": []
        },
        {
            "author": "Crumpled_Papers",
            "body": "Interesting post well-written. \n\n>my perfectionism disguised as caution left me spinning my wheels for months. It felt productive, but it wasn't, it was just fancy procrastination.\n\nThis one line was particularly poignant and applicable across our lives, not just our lives as gamedevs.",
            "score": 2,
            "replies": []
        },
        {
            "author": "neonoodle",
            "body": "I don't understand how the term prototype is used here. Prototyping is the stage of getting an initial functional version of a game or mechanic as a playable. Throughout the course of a project you're always prototyping either the core gameplay loop or individual mechanics. You can do so with or without a guiding design doc for the feature, but it's not possible to skip a prototype phase and just go right from design doc into the \"final\" since the first working iteration is still the prototype, and will reveal issues that the design doc didn't account for (that requires the expensive rework because the design doc was flawed but just goes to show that that first version that made it playable was the prototype).",
            "score": 3,
            "replies": [
                {
                    "author": "badasimo",
                    "body": "Someone might plan out the final product and dependencies in a way that it's only playable at the end.  For instance, they might start by designing assets and sound before working on gameplay.  Someone who is more creatively oriented might be doing that already as part of the ideation process.   Or you could have some version of it working but be saving major game systems for later (like inventory or scoring etc) or even the menus/UI.",
                    "score": 6,
                    "replies": []
                },
                {
                    "author": "MochiGameDesign",
                    "body": "IMHO, I differentiate a Proof of Concept from a Prototype. You test ideas through iterations, and that is a PoC. The super early phase of anything, is a prototype. Makes sense?",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "RockyMullet",
            "body": ">\u00a0I thought thorough planning on paper was enough; great ideas clearly defined should work, right?\n\nThis is basically why I hate design documents and I'm sick of seeing people telling everyone and their mother that they should write one.\n\nTo me writing a design document first would be like a chef writing a cook book with detailed recipes he has not even tried.\n\nIt can be ok as a communication tool, to show to potential publishers or new team members, but don't threat it as the bible for your game, where it is written as the unchallengeable truth of a game you haven't even started yet.",
            "score": 2,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "From my many years of experience with big and small studios, I find them critical. They are needed to keep a steady course on the vision, not just as a wiki with all the mechanics",
                    "score": 2,
                    "replies": []
                }
            ]
        },
        {
            "author": "Apprehensive_Tone870",
            "body": "Thanks for sharing. I'm currently working on my second game, and before I started creating anything, I had a clear vision of what I wanted the game to be and its core mechanics. Along the way, I have encountered bugs that were sometimes incredibly fun and unintended, which led to even more mechanics and, of course, feature creep. So yeah, I'm definitely taking your advice! and force myself to move on, i can add new stuff for polishing later.",
            "score": 1,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "Good luck!",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "ClassAkrid",
            "body": "Where did you hear about FTL prototyping first? I'd like to look into that.",
            "score": 1,
            "replies": [
                {
                    "author": "MochiGameDesign",
                    "body": "Comments like [https://www.reddit.com/r/pcgaming/comments/10dwycx/comment/j4nql3c/?utm\\_source=share&utm\\_medium=web3x&utm\\_name=web3xcss&utm\\_term=1&utm\\_content=share\\_button](https://www.reddit.com/r/pcgaming/comments/10dwycx/comment/j4nql3c/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button) and especially [https://arstechnica.com/gaming/2022/11/ten-years-of-ftl-the-making-of-an-enduring-spaceship-simulator/](https://arstechnica.com/gaming/2022/11/ten-years-of-ftl-the-making-of-an-enduring-spaceship-simulator/)",
                    "score": 2,
                    "replies": [
                        {
                            "author": "ClassAkrid",
                            "body": "Wow! Thanks for this. Great read.",
                            "score": 1,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "Empty_Allocution",
            "body": "I made this thing called Entropy : Zero 2 with a team of some amazing guys from around the world, and with that project I skipped a lot of prototyping and built the game chronologically (from a story perspective) and built it to a particular standard as we went.\n\nThere was a lot of back-tracking and it was a LOT of work, but ultimately I think the game owes it's success to the way we built it because we were able to go deep with the minutia in regard to both the world and the story and we didn't get caught up in dev tests or concept hell.\n\nThere were dev testbeds and some prototyping happened for specific features per se, but these were never at the forefront of development; and were always happening whilst the game was being built behind the curtain.\n\nThis direction was driven by myself and the philosophy was born from a place of noticing over the years, that many devs will get caught up in the web of their concepts. I believe if you are trying to make a *game*, you need to have something that is palpable and not just barebones from the outset so that you can get your hands on it early and literally drive development forward like a freight train.\n\nWith my more recent release (a game called Bat Blast!) I prototyped the core gameplay in a day (it's a bit like pinball) and then applied the same philosophy as above, building the game from day 2 and iterating over and over, whilst adding variations and new features as I went.\n\nPrototyping too much bores the hell out of me. I also feel like I have a good handle now on the time I can allot to my projects and that time has value. If the project isn't moving forward, something needs to change.",
            "score": 1,
            "replies": []
        },
        {
            "author": "HorsieJuice",
            "body": "I\u2019ve been on AAA teams that talked about iteration and prototyping while being completely oblivious to the fact that the majority of the team needs tools in order to do that. I\u2019m happy that the designers and their support engineers get to play around with shit, but what about the rest of us?",
            "score": 1,
            "replies": []
        },
        {
            "author": "HuecoTanks",
            "body": "I love the term, \"fancy procrastination!\" Great post!",
            "score": 1,
            "replies": []
        },
        {
            "author": "Tusero",
            "body": "How exactly do you guys prototype your ideas? Who get to play it? How do you collect and analyse data from it?\n\nThis is a point I really struggle with, like are there methods that are commonly used for prototyping most newbies may be missing out?",
            "score": 1,
            "replies": []
        },
        {
            "author": "Ordinary_Paper_7570",
            "body": "It is good to have a plan, but you must not always follow it.",
            "score": 1,
            "replies": []
        }
    ]
}