{
    "title": "Struggling with Tailwind \u2013 How Do You Stay Organized?",
    "author": "9InTheMorning",
    "subreddit": "webdev",
    "rank": 4,
    "score": 9,
    "upvote_ratio": 0.63,
    "num_comments (reported by reddit)": 48,
    "url": "https://www.reddit.com/r/webdev/comments/1jeg2q9/struggling_with_tailwind_how_do_you_stay_organized/",
    "id": "1jeg2q9",
    "selftext": "I'm a front-end developer who has always used a classic approach: a clean HTML file with each element assigned a proper class and separate (S)CSS files for styling.\n\nRecently, I started a side project to try out Tailwind... and it's been a mess.\n\nI have a simple login page with just five elements for username and password inputs, yet I already feel overwhelmed. I can't imagine managing a full-scale web app this way.\n\nSo, my questions are:\n1. How do you organize your project with Tailwind?\n2. How do you keep track of elements without class names?\n\nI find it much clearer to use class names like login-page, login-input, and login-label. With Tailwind, if I have multiple identical elements (like form labels), do I need to copy and paste the same utility classes for each one?\n\nI just want to structure my code in a way that doesn\u2019t feel overwhelming. Also, is the best way to learn Tailwind simply through practice and reading the documentation when I'm unsure?\n\nThanks in advance, everyone!\n\nEdit: I'm using React 18/19 and tailwind 4",
    "comments": [
        {
            "author": "koevh",
            "body": "If you find yourself repeating classes and stylings, you should probably convert the HTML to a component.\n\nAlso using the prettify Tailwind CSS plugin helps - it orders your classes semantically.",
            "score": 36,
            "replies": [
                {
                    "author": "9InTheMorning",
                    "body": "Yeah, using components is key. But even for 2 fields like label and input for username and password?",
                    "score": 5,
                    "replies": [
                        {
                            "author": "Lewissunn",
                            "body": "Yes, absolutely.\nTbh it sounds like you're using it on plain html which yeah, is repetitive and not very fun.",
                            "score": 5,
                            "replies": []
                        },
                        {
                            "author": "DondeEstaElServicio",
                            "body": "Don't be afraid to use small components. View libs like Vue or React aren't only about reactivity and managing some inner state, they are a great tool for HTML abstractions. So when you look at, for instance, the Bootstrap docs, you can define every Bootstrap component as a Vue/React component, just an HTML element with a set of classes and that's it.\n\nIn fact, if you look at libs like Nuxt UI, you'll see how fine the granularity is.",
                            "score": 2,
                            "replies": []
                        },
                        {
                            "author": "sexytokeburgerz",
                            "body": "I mean yeah but username and password are like 5 elements max, you don\u2019t need much for that.\n\nA lot of people just use ui libraries",
                            "score": 0,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "dustar3",
            "body": "You can easily create components in Tailwind https://tailwindcss.com/docs/adding-custom-styles, but also variants and utilities https://tailwindcss.com/docs/functions-and-directives.\n\nAnd you can totally use separated stylesheet files and reuse classnames, the documentation has a large panel of examples, like many other frameworks or libraries, you must definitely read the documentation a little bit to understand what it can offer you.\n\nIt's a shame that people just see Tailwind as a compilation of utility classes to put directly in the html class tags, because is so much more powerful than that.",
            "score": 12,
            "replies": []
        },
        {
            "author": "nazzanuk",
            "body": "If not using Tailwind was serving you well, you really don't need to clutter all your html with endless helper classes.",
            "score": 6,
            "replies": [
                {
                    "author": "PowerfulTusk",
                    "body": "Wait, writing inline styles with new syntax is clutter? How dare you",
                    "score": 2,
                    "replies": []
                },
                {
                    "author": "BadManTaliban",
                    "body": "yes, if your setup works, no need to stack a ton of classes for no reason",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "happy_hawking",
            "body": "Recently I saw a video tutorial in which the creator of Tailwind explained a solution for an interesting edge case.\n\nBut way more interesting was the HTML code he was sharing. It made me puke. Everything cluttered with classes, wet as fuck.\n\nIMHO Tailwind only makes sense if you use a framework that allows you to create components. It's fine to style components but it's hell of you just apply it to your HTML. And there's still a lot of edge cases where you need normal CSS...",
            "score": 8,
            "replies": [
                {
                    "author": "urbisOrbis",
                    "body": "Wet as fuck\u2026. Damn near did a spit take. Tailwind is for novices or for folks who just don\u2019t have time to learn css patterns.",
                    "score": -4,
                    "replies": [
                        {
                            "author": "CharlesCSchnieder",
                            "body": "Tailwind is just css, you can't use it if you don't know css",
                            "score": 0,
                            "replies": []
                        }
                    ]
                },
                {
                    "author": "sraypole",
                    "body": "This is the answer. It is NOT great \ud83d\udc4d\ud83c\udffb if you\u2019re not using something like Vue/React and specifically breaking everything down to small atomic components.\n\nHaving something with batteries included like bootstrap or Material is nice in other scenarios",
                    "score": -6,
                    "replies": []
                }
            ]
        },
        {
            "author": "guaip",
            "body": "I see the merits of tailwind sometimes, but I can't find myself using it other than building a landing page for now.\n\nI think it makes more sense when you are using it to build components in React. But for a framework-free website, it still feels a bit awkward.",
            "score": 6,
            "replies": []
        },
        {
            "author": "30thnight",
            "body": " cva if you are working with a frontend library \n\n\nhttps://cva.style/docs/getting-started/variants",
            "score": 2,
            "replies": [
                {
                    "author": "nazzanuk",
                    "body": "The amount of stuff built on top of Tailwind just to make it more manageable or readable is baffling",
                    "score": 2,
                    "replies": []
                }
            ]
        },
        {
            "author": "maddog986",
            "body": "You can still use a separate css files for more complex reusable elements. Or create usable components (in whatever your language of choice is) for each element.\n\nAs a solo developer, tailwind has saved me many weeks of extra coding when I have to essentially rebuild my clients site every year with either a completely new look or abandon huge sections in favor of new content and design. Going back to old css code to cleanup from the old sections can be a nightmare. Or do the alternative thing and have separate CSS files for every single thing, and again, its a nightmare to manage and cleanup compared to tailwind. With tailwind, I can simply just delete the sections of old code and not worry about having to go cleanup some css file somewhere else (also eliminates the thought of \"did I use this somewhere else that I need to keep?\").\n\nI have also seen a 60% reduction in css file sizes overall since switching to tailwind.\n\nHowever, if you do not know css very well, tailwind can be very daunting to learn. Luckily, I've been doing css since v2 days and know css by memory at this point \ud83e\udd23",
            "score": 2,
            "replies": [
                {
                    "author": "lordkekw",
                    "body": "As a student of web development who has solely used pure CSS from the beginning (2-3 years) and recently started freelancing, I couldn't agree more.  \n  \nI love CSS and never see the problems people point out because, if you master the fundamentals, everything becomes easier. The real headache is the complexity and maintainability, sometimes it's a nightmare, even if you do your best to keep things organized.  \n  \nTailwind feels like a cheat, dark magic, or a deal with the devil that you can't resist.",
                    "score": 2,
                    "replies": []
                }
            ]
        },
        {
            "author": "machopsychologist",
            "body": "\u2026 just add a class if you really can\u2019t remember what something is for. \n\nYou don\u2019t need to give the class any styles.",
            "score": 2,
            "replies": []
        },
        {
            "author": "TylerDurdenJunior",
            "body": "I stay organized by not using Tailwind",
            "score": 2,
            "replies": []
        },
        {
            "author": "anus-the-legend",
            "body": "choose something besides tailwind",
            "score": -2,
            "replies": []
        },
        {
            "author": "greedness",
            "body": "Tailwind is supposed to be used in components you will reuse but will most likely never touch again. And if you or someone else has to touch it again, you wont have to dig where styles were set.\n\nIf you're solo, it doesnt really matter. Just use what you're comfortable with.",
            "score": 1,
            "replies": []
        },
        {
            "author": "clit_or_us",
            "body": "I use it to build individual components, then a few props to tweak certain aspects of the style. That way my html is pretty bare bones and I just have to worry about where and how I position the elements.",
            "score": 1,
            "replies": []
        },
        {
            "author": "Zestybeef10",
            "body": "Wym, you dont like having bricks of css inline and copied and pasted everywhere?",
            "score": 1,
            "replies": []
        },
        {
            "author": "chevalierbayard",
            "body": "If you're using React, you should be making components to abstract away all of the utility classes safe in the knowledge that if you see something you need to fix, it means opening that component and making the fix there and only there.",
            "score": 1,
            "replies": []
        },
        {
            "author": "CatolicQuotes",
            "body": "tailwind is best used with component style frontend frameworks like react etc. Using in regular templates can be a mess but you can create single classes like daisyui did.",
            "score": 1,
            "replies": []
        },
        {
            "author": "SunderApps",
            "body": "I think that\u2019s the right call.  Pretty sure I won\u2019t be using TW on any personal projects.",
            "score": 1,
            "replies": []
        },
        {
            "author": "Pretagonist",
            "body": "Tailwind works best with a component based system. \n\nYou have your input component and you reuse it whenever you want an input. You put your inputs inside a form component and so on. \n\nYou're essentially replacing css files, html files and js files with discrete components that contain the structure, design and functionality in one. Not sharing classes between components might make large scale re-skinning harder but it also means that you can change components without ruining other parts of your app (hopefully, it's still possible to mess up of course).\n\nOf course tailwind does have mechanisms for creating class like things but to me that's missing the point. Sure, have some definitions for your color scheme, fonts and such but if you need classes then just use classes.\n\nThere are tools that help with tailwind as well, they can sort your tailwind classes and help you write them.",
            "score": 1,
            "replies": []
        },
        {
            "author": "Powerplex",
            "body": "https://tailwindcss.com/docs/styling-with-utility-classes#managing-duplication\n\nI would also advise to look into tiny libraries such as ''class-variance-authority\" which helps you organize your classes as you want.",
            "score": 1,
            "replies": []
        },
        {
            "author": "RankedQju",
            "body": "Add custom tailwind styles for general styling and reuse. The same elements should have the same style no matter where u use it usually. Eventually you will have a proper system and then you will actually benefit from tailwind :-))",
            "score": 1,
            "replies": []
        },
        {
            "author": "SunderApps",
            "body": "I am someone who believes strongly that HTML is for structure, CSS for style, JS for functionality, and if you\u2019re crossing wires you\u2019ve made a mistake. \n\nI just started learning tailwind for a potential job and am not loving it.  Feels good for prototyping, but it\u2019s so damn verbose.\n\nAnyway, the answer is to use `@apply` in your SCSS.  Give the HTML one descriptive class, then in that selector use `@apply class1 class2 etc` to have your class inherit from the TW classes. \n\nhttps://tailwindcss.com/docs/functions-and-directives",
            "score": -6,
            "replies": [
                {
                    "author": "Valuesauce",
                    "body": "That\u2019s not the answer and don\u2019t do that, the docs specifically call this out as an anti-pattern. You shouldn\u2019t be using @apply all the time",
                    "score": 12,
                    "replies": [
                        {
                            "author": "Spiritual-Theory",
                            "body": "I thought @apply was the solution too, what's the best way?  Say you have a Select component and TextInput component (similar to OPs usecase) and want to share some border and padding styles, this seems like a great time to use @apply.  How would you handle it?",
                            "score": 1,
                            "replies": []
                        },
                        {
                            "author": "SunderApps",
                            "body": "Well I did say I just started learning.\n\nIf that\u2019s the case, I\u2019m back to anti TW.",
                            "score": 2,
                            "replies": [
                                {
                                    "author": "Valuesauce",
                                    "body": "Yeah it\u2019s all good, tbf it\u2019s a super common thing to have people do early on, which is probably why they ended up calling it out in the docs",
                                    "score": 1,
                                    "replies": []
                                },
                                {
                                    "author": "Archeelux",
                                    "body": "man its amazing to me how people cant grasp TW, if you are just manually building each HTML page then yes, it wont work. But for component frameworks like react and svelte, its a dream.",
                                    "score": -1,
                                    "replies": [
                                        {
                                            "author": "nazzanuk",
                                            "body": "CSS modules is a dream, Tailwind is sleep paralysis.",
                                            "score": 1,
                                            "replies": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "9InTheMorning",
                    "body": "I read about it, but if I have to use Tailwind this way I'll use directly css instead. It doesn't make sense to me this solution :/",
                    "score": 3,
                    "replies": []
                }
            ]
        },
        {
            "author": "defaultagi",
            "body": "Vibe code",
            "score": 1,
            "replies": []
        },
        {
            "author": "nathman999",
            "body": "I hate working with plain HTML and I hate working with plain CSS even more. Discovering Tailwind was such a blessing to me and anyone who still roots for old way of doing things is just weird\n\nI don't understand problem of keeping track of elements unless you're actually doing some smelly plain html editing. Separating stuff into Components (like in React) is a good way to minimize html code to this one simple thing you're currently working on so that it will be pretty obvious what certain divs supposed to do here, if really needed I would add comment block before div to note something important. And even if you're not a fan of React and stuff like that then you should do generation of static pages via some templating language (that still uses html syntax but lets you build page out of separate building blocks) that would let you separate meaningful things into separate files, though for that I would still use react just configured for SSG, end result is html+css(+optionally js) anyway.",
            "score": 1,
            "replies": [
                {
                    "author": "urbisOrbis",
                    "body": "We aren\u2019t weird you are just lazy",
                    "score": 2,
                    "replies": []
                }
            ]
        },
        {
            "author": "RBN2208",
            "body": "!remindme 1day",
            "score": -1,
            "replies": [
                {
                    "author": "RemindMeBot",
                    "body": "I will be messaging you in 1 day on [**2025-03-19 21:15:25 UTC**](http://www.wolframalpha.com/input/?i=2025-03-19%2021:15:25%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/webdev/comments/1jeg2q9/struggling_with_tailwind_how_do_you_stay_organized/miiawkf/?context=3)\n\n[**CLICK THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fwebdev%2Fcomments%2F1jeg2q9%2Fstruggling_with_tailwind_how_do_you_stay_organized%2Fmiiawkf%2F%5D%0A%0ARemindMe%21%202025-03-19%2021%3A15%3A25%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%201jeg2q9)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|",
                    "score": 0,
                    "replies": []
                }
            ]
        },
        {
            "author": "NorthernCobraChicken",
            "body": "If you have an element or repeating elements with more than 4 or 5 classes, turn it into a custom class and use @apply.",
            "score": 0,
            "replies": [
                {
                    "author": "nazzanuk",
                    "body": "Abstracting utility class back into CSS is just peak irony",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "Dude4001",
            "body": "If you\u2019re using something like a button repeatedly, obviously that should be a suitably flexible component.\n\nIt\u2019s also not illegal to add your own classes in global.css and just @apply the styles you want. A handful of exceptions is better than a whole page of explicit styles. And you still get the tailwind consistency.",
            "score": 0,
            "replies": []
        },
        {
            "author": "Fightcarrot",
            "body": "!remindme 1day",
            "score": -1,
            "replies": []
        },
        {
            "author": "deqvustoinsove684651",
            "body": "I feel like the philosophy of tailwind is to spend less time organizing code and more time building",
            "score": -1,
            "replies": []
        }
    ]
}