{
    "title": "What are best practise for writing code documentation?",
    "author": "ArcherFromFate",
    "subreddit": "webdev",
    "rank": 10,
    "score": 3,
    "upvote_ratio": 0.71,
    "num_comments (reported by reddit)": 8,
    "url": "https://www.reddit.com/r/webdev/comments/1jed1h3/what_are_best_practise_for_writing_code/",
    "id": "1jed1h3",
    "selftext": "Is writing self documenting code with comments enough or should we also include jsdoc/docstring with mkdoc/doxygen? \n\nI would to know industry standard and how you personally do it. ",
    "comments": [
        {
            "author": "anus-the-legend",
            "body": "there are several types of documentation:\u00a0\n\n\n- end user documentation explains how your software is to be used by non-technical users. this is usually kept and published separately from developer documentation\n- high-level technical documentation provides and overview of all the major components of your software and how they work together. this might be tutorials, step by step instructions, recipes. this type and the following section are often automatically compiled and published together\n- module, class, function, member, or some other low level, granular API documentation describes what something is, what it does, expectations, side effects, or any other contracts involved. these are your doc blocks usually found at the beginning of some block of code or scope\n- inline comments are used to explain why certain decisions were made and refer to specific lines of code. they might link to a ticket or some other decision making documentation. they should NOT describe what the code does, rather why it does them the way it does when they are not immediately obvious. This type of documentation is rarely seen outside the codebase and can be short lived\n- self documenting code refers to code that is easy to understand without inline comments because of well chosen variable, function, method, class, and constant names and code that uses a language idiomatically.\n\n\nall of these types of documentation are part of a professional code base, but each language has its own tooling to assist in writing and publishing it",
            "score": 3,
            "replies": []
        },
        {
            "author": "magenta_placenta",
            "body": "This was in a a recent issue of a newsletter I subscribe to:\n\nhttps://chrisnicholas.dev/blog/how-to-write-exceptional-documentation",
            "score": 1,
            "replies": [
                {
                    "author": "ArcherFromFate",
                    "body": "This was a great read but it more geared to getting people to use and understand your api then say onboard and help code the actual api itself for example.\u00a0",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "mmzeynalli",
            "body": "Im working on open-source right now, and the half of codebase are docstrings, which are used to generate docs with mkdocs.",
            "score": 1,
            "replies": []
        },
        {
            "author": "originalchronoguy",
            "body": "Take a look of a good example of self-documention: [https://compodoc.github.io/compodoc-demo-todomvc-angular/](https://compodoc.github.io/compodoc-demo-todomvc-angular/)\n\nThis is angular, if you write clean code, the documentation will be generated for you at build time. No more worrying about drift, out-dated documentation. Every new commit generates up-to-date documentation. Better than any human can. Bad documentation are the ones that clutter of the code base because if you no longer user a method, you remove it and let git handle the versionibg. No need to comment 40 lines of code \"just in case someone needs to refer to it.\" That is the point of git commits.\n\nIf your naming convention is clear and follow a proper style guide, something like above, CompoDoc does a good, if not great job at documentation. Even includes pretty  \ny diagrams ( https://compodoc.github.io/compodoc-demo-todomvc-angular/modules.html ) , flow ( https://compodoc.github.io/compodoc-demo-todomvc-angular/routes.htm ) , and graphs along with detail of what the types are ( https://compodoc.github.io/compodoc-demo-todomvc-angular/injectables/EmitterService.html ). Typescript helps here.\n\nNow, show me a human who can re-write documents like that daily, keep it up to-date?",
            "score": 1,
            "replies": [
                {
                    "author": "ArcherFromFate",
                    "body": "This looks great but it looks like it only supports angular. Would be nice if it had support for react or other type of framework.\u00a0",
                    "score": 1,
                    "replies": []
                }
            ]
        },
        {
            "author": "TA_DR",
            "body": "I believe the idea of self-documenting code is dangerous. what might be obvious to you might not be obvious to others. the idea is that we have to explain stuff and at the same time avoid cluttering the reader's mental desk, you have to think about ***who*** is reading your docs and ***why***. Where I work we tend to follow this phrase:\n\n\"***I should be able to understand your module by reading the docs, your interfaces by reading the docstrings and your implementations by reading the comments***\"\n\nSo a quick example of this mindset would be:\n\ncomments: Why something weird or not self-explanatory is done a certain way. e.g: \"This is because n section of X standard\", \"This is needed so its backwards compatible with X.xx version of <library>\", etc\n\ndocstrings: Describes interface, behavior and how to use. e.g: \"Implements X operation, parameter <p> can tweak the algorithm used, accepted values are ...\"\n\ndoc files: Everything related to business logic, how-tos and explanations. e.g: \"Every new entry on the <Table> must have an associated entry on <TableHistory>, as stated by the client\", \"To run this module we must first initialize....\". We just use markdown for these documents.\n\nOf course you can also define different levels of documentations depending on your needs, sometimes you also need to document for non-technical users or for programmers that are not involved in your project.",
            "score": 1,
            "replies": [
                {
                    "author": "ArcherFromFate",
                    "body": "Do you write docstrings and doc files for every module or only when its more complex.\u00a0",
                    "score": 1,
                    "replies": []
                }
            ]
        }
    ]
}