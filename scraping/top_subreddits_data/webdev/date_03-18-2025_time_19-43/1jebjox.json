{
    "title": "Laravel\u2019s Syntax Hijacking Forced Me to Refactor My Code Just to Make a Component Work. Why?",
    "author": "elainarae50",
    "subreddit": "webdev",
    "rank": 17,
    "score": 1,
    "upvote_ratio": 0.54,
    "num_comments (reported by reddit)": 12,
    "url": "https://www.reddit.com/r/webdev/comments/1jebjox/laravels_syntax_hijacking_forced_me_to_refactor/",
    "id": "1jebjox",
    "selftext": "I've been using Laravel components for years, but I hadn't created one in a while. Today, I got completely stuck for half an hour over an underscore in a variable name.\n\nTried CamelCase, snake\\_case, no underscore, matching it exactly in the class constructor, passing it explicitly in Blade, changing it in the class, and clearing every damn cache imaginable. Nothing worked.\n\nThen, out of pure desperation, I renamed the variable to a single word\u2014and suddenly, Laravel magically decided to cooperate.\n\nWTF is that about? Since when does Laravel dictate variable names like this? This isn't \"elegant syntax\"; it's arbitrary, undocumented BS that forces unnecessary refactoring. Laravel keeps adding new \"magic\" with every version, but half the time, it just gets in the way of things that should work out of the box.\n\nWhy should I have to debug Laravel itself instead of just writing code? \ud83d\ude21",
    "comments": [
        {
            "author": "Irythros",
            "body": "> Why should I have to debug Laravel itself instead of just writing code?  \n\nBecause you're using a framework with tons of magic to make things quicker as long as you know of what the magic is and does.\n\nIf you want to avoid magic then choose Symfony.\n\nAlso can you provide an example of exactly what you mean and were importing/using?  I'm curious of what was actually being hit with the magic.",
            "score": 6,
            "replies": [
                {
                    "author": "elainarae50",
                    "body": "I\u2019ve moved on, definitely not about to relive those 20 minutes of debugging hell. \ud83d\ude06 But basically, I was just trying to pass a variable with an underscore in Blade, and Laravel decided that was illegal. The \u2018solution\u2019? Just use one word and move on.\n\nI get that Laravel does a lot of magic, and sometimes it\u2019s great\u2026 but other times, it\u2019s like trying to guess which syntax will be allowed today.",
                    "score": -2,
                    "replies": [
                        {
                            "author": "Tontonsb",
                            "body": "There's no such limitation in plain Blade, variables with underscores in their names are perfectly valid. You must've made a typo then.",
                            "score": 3,
                            "replies": []
                        }
                    ]
                }
            ]
        },
        {
            "author": "amart1026",
            "body": "It\u2019s always been that way. I believe it has to do with attribute names not being valid variable names such as kabob case. I\u2019ve always found that annoying. But hey, now you know.",
            "score": 2,
            "replies": [
                {
                    "author": "elainarae50",
                    "body": "I am not sure I do know. All I found out is that I failed to create a variable with two words.",
                    "score": -2,
                    "replies": [
                        {
                            "author": "amart1026",
                            "body": "When you pass attributes using the blade syntax you can have names like \u201ctwo-words\u201d but that can\u2019t be used as a PHP variable name because of the dash. So Laravel converts it to camel case, \u201c$twoWords\u201d. The idea is that kabab case is commonly used for html attributes so they should be allowed but they must be converted for PHP. Knowing that now, just use kabab case for instead of snake case. I agree that they should leave valid names alone but it\u2019s never prevented me from doing what I needed.\n\nFYI, there are helper functions that translate casings if you really need them.",
                            "score": 3,
                            "replies": [
                                {
                                    "author": "elainarae50",
                                    "body": "So let me get this straight.... underscores are bad, but dashes are fine, except in PHP where they\u2019re bad, so Laravel turns dashes into camel case, but if you don\u2019t use dashes then it\u2019s fine, but if you use underscores then it\u2019s not fine because then it\u2019s camel case unless it\u2019s not, in which case, just use one word? Got it. Makes perfect sense.\n\nAnd while we're at it, let\u2019s talk database naming. Plural? Yes, except no, because Eloquent wants singular models but plural tables, except when it doesn\u2019t, so now I have to protect $table = \"tablename\" just to stop Laravel from randomly adding an \u2018s\u2019 where it doesn\u2019t belong? Fantastic. Nothing like manually overriding what should have worked in the first place.\n\nMeanwhile, let\u2019s just guess what our variables will be named because Laravel has decided that programmers shouldn\u2019t need consistency, just a magical, ever changing syntax roulette. Beautiful. 10/10 framework.",
                                    "score": -4,
                                    "replies": [
                                        {
                                            "author": "Tontonsb",
                                            "body": "Statements like \"Eloquent wants\" and \"Laravel decided\" implies you are trying to guess what syntax to supply. It would be more productive to learn what's going on.\n\n> underscores are bad, but dashes are fine, except in PHP where they\u2019re bad, so Laravel turns dashes into camel case, but if you don\u2019t use dashes then it\u2019s fine, but if you use underscores then it\u2019s not fine because then it\u2019s camel case unless it\u2019s not, in which case, just use one word?\n\nWhat exactly is the context where you had issues with underscores?\n\nThe thing about camelCase and kebab-case is that HTML sometimes needs kebab-cased attributes while languages like PHP and JavaScript can't have dashes in their variable names. Therefore multiple frameworks have added automatic conversion.\n\n> let\u2019s talk database naming. Plural? Yes, except no, because Eloquent wants singular models but plural tables, except when it doesn\u2019t, so now I have to protect $table = \"tablename\" just to stop Laravel from randomly adding an \u2018s\u2019 where it doesn\u2019t belong?\n\nThe convention is based on the fact that the model represents a single entry (e.g. User) while the table holds many entries, therefore it's `users`.\n\nEloquent doesn't \"want\". Eloquent attempts to guess the name of the table according to this convention. If you don't like the guessing, just specify the table name.\n\nBtw I'm not sure the framework imposes singular or capitalized model names. If you name the model `users`, you might get a matching table name automatically.",
                                            "score": 3,
                                            "replies": []
                                        },
                                        {
                                            "author": "amart1026",
                                            "body": "Build something better or learn to use what already exists. Lots of us are getting by just fine.",
                                            "score": 4,
                                            "replies": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "amart1026",
            "body": "It\u2019s always been that way. I believe it has to do with attribute names not being valid variable names such as kabob case. I\u2019ve always found that annoying. But hey, now you know.",
            "score": 0,
            "replies": []
        },
        {
            "author": "femio",
            "body": "Exactly why I have always disliked Laravel. Genuinely the only framework I refuse to use ever again.\u00a0\n\nhttps://www.reddit.com/r/laravel/comments/ak8lz4/laravel_is_such_a_ravioli/",
            "score": -2,
            "replies": [
                {
                    "author": "SteroidAccount",
                    "body": "You linked a 6yo post, even php was considerably worse back then.",
                    "score": 1,
                    "replies": []
                }
            ]
        }
    ]
}